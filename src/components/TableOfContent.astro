---
import type { MarkdownHeading } from 'astro'
import TableOfContentElements from './TableOfContentElements.astro';
import Image from 'astro/components/Image.astro';
import leftArrowSVG from "../images/General/tab.svg"

export interface Props {
    headings: MarkdownHeading[];
}

export type HeadingWithSubheadings = MarkdownHeading & {
    subheadings: HeadingWithSubheadings[];
};

const { headings } = Astro.props as Props;
const tableOfContent = generateTableOfContent(headings);

function generateTableOfContent(headings: MarkdownHeading[]) {
    if (!headings || headings.length === 0)
        return undefined;

    
    // Check if first heading is lowest depth
    let firstHeadingDepth = headings[0].depth;
    for (let i = 0; i < headings.length; i++) {
        const depth = headings[i].depth;
        if (depth < firstHeadingDepth) {
            console.error(`First Heading isn't the most important heading. First heading: ${firstHeadingDepth}. Lowest Depth: ${depth}`);
            return undefined;
        }
    }

    let tableOfContent: HeadingWithSubheadings[] = [
        {
            ...headings[0],
            subheadings: [],
        }
    ];
    
    if (headings.length === 1)
        return tableOfContent;

    let currIndex = 1;

    buildHeadingsTree(tableOfContent, tableOfContent[0]);
    // printTableOfContent(tableOfContent); 
    return tableOfContent;

    function buildHeadingsTree(prevParentHeading: HeadingWithSubheadings[], prevHeading: HeadingWithSubheadings) {
        while (currIndex < headings.length) {
        
            const heading: HeadingWithSubheadings = {
                ...headings[currIndex],
                subheadings: [],
            };

            const prevDepth = prevHeading.depth;

            if (heading.depth < prevDepth) {
                return undefined;
            }
            else if (heading.depth === prevDepth) {
                prevParentHeading.push(heading);
                ++currIndex;
                buildHeadingsTree(prevParentHeading, heading);
            }
            else if (heading.depth > prevDepth) {
                prevHeading.subheadings.push(heading);
                ++currIndex;
                buildHeadingsTree(prevHeading.subheadings, heading);
            }
        }
    }

    // function printTableOfContent(headings: HeadingWithSubheadings[]) {
    //     for (let i = 0; i < headings.length; i++)
    //     {
    //         const heading = headings[i];
    //         console.log(`${"\t".repeat(heading.depth)}${heading.depth}: ${heading.text}`);
    //         // console.log(heading)
    //         printTableOfContent(heading.subheadings);
    //     }
    // }
}

---

<div class="table-of-content-container">
    <div class="table-of-content">
        <!-- <Image src={leftArrowSVG} alt="expand-toc" width="25" height="25" class:list={"expand-toc-arrow"}></Image> -->
        <h2>Table of Contents</h2>
        {tableOfContent && <TableOfContentElements headings={tableOfContent}/>}
    </div>
</div>
    
<style>
    .table-of-content-container {
        /* position: relative; */
        min-width: 250px;
        max-width: 275px;
        transition: all 0.7s ease-in-out;
        position: sticky;
        top: 25px;
        background-color: var(--color-secondary);
        height: fit-content;
        border-radius: 10px;
        padding: 15px 20px 10px;
    }
    
    .table-of-content {
        height: fit-content;
        background-color: var(--color-secondary);
    }

    .table-of-content h2 {
        margin: 0;
        padding: 0;
        border-bottom: none;
    }
    
    /* .expand-toc-arrow {
        display: none;
    } */

    @media screen and (max-width: 1200px) {
        .table-of-content-container {
            min-width: 0;
            width: 0;
            padding: 0;
            opacity: 0;
        }
        
        /* .expand-toc-arrow {
            display: block;
            position: absolute;
            transform: translate(-40px, 1.25rem);
        } */
    }
</style>

<!-- TODO: Highlight each heading as the user scrolls -->
<!-- <script>
    
</script> -->