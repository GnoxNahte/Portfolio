---
import { Tags } from '../others/tags';
import { getDuration } from '../styles/utilities';
import TagDisplay from './TagDisplay.astro';
import { Image } from "astro:assets";

export interface ZodImageProps {
    src: string;
    height: number;
    width: number;
    format: "png" | "webp" | "jpeg" | "jpg" | "svg" | "tiff" | "gif" | "avif";
}

export interface Props {
    title: string;
    description: string;
    startDate: Date;
    releaseDate?: Date;
    thumbnailPath: ZodImageProps;
    slug: string;
    tags: Tags[];
};

const {title, startDate, releaseDate, description, thumbnailPath, slug, tags} = Astro.props as Props;

const dateOptions: Intl.DateTimeFormatOptions = { day: "numeric", month: "long", year: "numeric" };
// TODO (LOW): Detect the user's location using window.navigator.language
// But need to use <script></script>?
const userLocale="en-UK";
---

<a class="card projectCard" id={title} href={`/${slug}/`} data-tags={tags}>
    <Image 
        src={thumbnailPath} 
        alt={title + " thumbnail"} 
        transition:name=`project-img-${title}` 
        widths={[320, 500, thumbnailPath.width]}
    />
    <div class="details">
        <h2>{title}
        </h2>
        <TagDisplay tags={tags} project={title} isSmall={true} ifAddLink={false}/>
        {(tags.includes(Tags.Ongoing) || releaseDate === undefined) ?
            <p>Date: <span class="date">{startDate.toLocaleDateString(userLocale, dateOptions)} - Ongoing</span></p>
            :
            <p>Date: <span class="date">{startDate.toLocaleDateString(userLocale, dateOptions)} - {releaseDate.toLocaleDateString(userLocale, dateOptions)} ({getDuration(startDate, releaseDate)})</span></p>
        }
        <p>{description}</p>
    </div>
</a> 

<style>
    .card {
        /* Changes depending on the screen size */
        --curr-max-height: 25rem; 
        
        --animation-time: 1.25s;
        --animation-curve: cubic-bezier(0.15, 0.79, 0.2, 1);
        
        height: max-content;
        overflow: hidden;
    }
    
    .card:hover {
        outline: rgba(255,255,255,0.9) solid 2px;
        box-shadow: 0 0 10px 10px rgb(255, 255, 255, 0.15);
    }
    
    .projectCard {
        display: flex;
        align-items: center;
        overflow-y: hidden;
    }

    .projectCard img {
        width: 30%;
        min-width: 30%;
        height: fit-content;
        overflow: hidden;
        border-radius: 10px;
        transition: transform 0.3s;
    }

    .projectCard:hover img {
        transform: scale(1.025);
    }

    .projectCard .details {
        display: inline-block;
        margin-left: 20px;
        flex-grow: 1;
    }

    /* Animating underlines. Base code from: https://css-irl.info/animating-underlines/ */
    h2 {
        margin-bottom: 0;
        position: relative;
        border-bottom: none;
        overflow: hidden;
    }

    h2::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 0.05em;
        background-color: var(--color-accent);
        transition: opacity .3s ease-out;
        opacity: 0;
        /* transform: translateX(-100%); */
    }
    
    .projectCard:hover h2::after,
    .projectCard:hover h2::after {
        /* transform: translateX(0); */
        opacity: 1;
        /* transition: opacity 1s ease-out; */
        /* animation: .75s ease-out forwards showUnderline; */
    }

    .projectCard:hover h2 {
    }

    a .details p {
        margin-top: 0;
        margin-bottom: 0;
    }

    a, a:hover {
        text-decoration: none;
        color: var(--color-text);
    }

    .hideCard {
        /* max-height: 0; */
        /* transition: max-height 2000ms; */
        animation: var(--animation-time) var(--animation-curve) both hideCard;

        /* position: absolute; */
    }

    @keyframes hideCard {
        from {
            max-height: var(--curr-max-height);
            opacity: 1;
        }
        30% {
            opacity: 0;
        }
        to {
            padding: 0;
            margin: 0;
            max-height: 0;
            opacity: 0;
        }
    }

    .showCard {
        /* max-height: 0; */
        /* transition: max-height 2000ms; */
        animation: calc(var(--animation-time) * 2) var(--animation-curve) calc(var(--animation-time) * 0.3) both showCard;
    }

    @keyframes showCard {
        from {
            padding: 0;
            margin: 0;
            max-height: 0;
            opacity: 0;
        }
        3% {
            opacity: 0;
        }
        to {
            max-height: var(--curr-max-height);
            opacity: 1;
            padding: 25px;
            margin-bottom: 20px;
        }
    }

    @media screen and (max-width: 750px) {
        .card {
            --curr-max-height: 50rem;
        }

        .projectCard {
            flex-direction: column;
            align-items: flex-start;
            max-height: calc(100dvh - 100px);
        }
        
        .projectCard img {
            /* min-width: 100%; */
            width: fit-content;
            max-width: min(500px, 100%);
            margin: 0 auto;
        }

        .projectCard .details {
            margin: 0;
        }

        .projectCard h2 {
            margin-top: .8em;
        }
    }

</style>