---
import { getCollection } from "astro:content";
import ProjectCard from "../components/ProjectCard.astro";
import Tag, { GetTagTypeClass, PascalCaseToSpaceSeperated } from "../components/Tag.astro";
import Layout from "../layouts/Layout.astro";
import { Tags } from "../others/tags";
const cards = await getCollection("projects");

let tagArray: Tags[] = []; // Contains all tags without the categories

// Key - Every 100th element in the enum is the title of the category
// Value - Array of all elements in the category
let tagDictionary: { [key: string]: Array<Tags> } = {}

// Seperate Tags into their different catergories
// Example:
//      Input:
//      enum Tags {
//          // Engine
//          Engine = 0,
//          Unity,
//          Unreal,
//          Astro, 

//          // Project Type
//          ProjectType = 100,
//          School,
//          GameJam,
//          Personal,
//          Client,

//          // Platform
//          Platform = 200,
//          Windows,
//          WebGL,
//          Website,
//      }
//      Output:
//      {
//        Engine: [ 'Unity', 'Unreal', 'Astro' ],
//        ProjectType: [ 'School', 'GameJam', 'Personal', 'Client' ],
//        Platform: [ 'Windows', 'WebGL', 'Website' ]
//      }

function SeperateTags()
{
    const enumValues = Object.keys(Tags).filter(key => isNaN(Number(key)));
    for (let i = 0; i < enumValues.length; ++i)
    {
        const value = Tags[enumValues[i] as keyof typeof Tags];
        // If new category,
        if (value % 100 == 0) {
            tagDictionary[Tags[value]] = [];
        }
        // Else, add the enum value to the category
        // Key - Every 100th element in the enum is the title of the category
        // Value - Array of all elements in the category
        else {
            // Divide the value by 100, round it, * 100, to get the category
            const category = (Math.floor(value / 100) * 100) as Tags;
            tagDictionary[Tags[category]].push(value);
            // Add all non-category tags
            tagArray.push(value);
        }
    }
}


SeperateTags();


---

<Layout title = "Search">
	<h1>Search</h1>
    <section>
        <div class="container searchBar">
            <div class="card">
                <input id="searchInput" type="search" placeholder="Search"/>
                <button id="openFilterPanelBtn">Filter</button>
            </div> 
        </div> 
        <div class="container filterPanel">
            <div class="card">
                <div class="filterPanelHeader">
                    <h2>Filter Tags</h2>
                    <button id="closeFilterPanelBtn"> 
                        <i class="fa-solid fa-xmark"></i>
                    </button>
                </div>
                <div class="tag-container" id="filterTagPanel">
                    {
                        // 1. Loop through each category in tagDictionary, 
                        // 2.   Display Header for catergory
                        // 3.   Loop through each tag in category
                        // 4.       Display the tag
                        Object.keys(tagDictionary).map((category) => {
                            const categoryValue = Tags[category as keyof typeof Tags];
                            
                            return (
                                <div class="tag-container-filter-panel">
                                    <h3 class={GetTagTypeClass(categoryValue)}>{PascalCaseToSpaceSeperated(category)}</h3> 
                                    <ul>
                                        {
                                            tagDictionary[category].map((tag) => {
                                                return <Tag tag={tag} project="filter-btn" ifAddLink={false}/>
                                            })
                                        }
                                    </ul>
                                </div>
                            )})
                    }
                </div>
                <div class="tagSummary tag-container">
                    <div id="includeTagSummary">
                        <h2>Include Tags: </h2>
                        <ul>
                            {
                                tagArray.map((tag) => <Tag tag={tag} project="filter-summary" />)
                            }
                        </ul>
                    </div>
                    <div id="excludeTagSummary">
                        <h2>Exclude Tags: </h2>
                        <ul>
                            {
                                tagArray.map((tag) => <Tag tag={tag} project="filter-summary" />)
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="container" id="searchResult">
                {cards.map(card => (
                    card.data.ifShow &&
                    <ProjectCard 
                        title={card.data.title} 
                        description={card.data.shortDescription} 
                        thumbnailPath={card.data.thumbnailPath}
                        slug={card.slug}
                        tags={card.data.tags}
                    />
                ))}
        </div>
    </section>
</Layout>   

<style>
    .searchBar .card {
        display: flex;
    }

    .searchBar input {
        width: 100% ;
        background-color: var(--color-tertiary);
        border-radius: 0.7rem;
        border-color: #555555;
        border-style: solid;
        color: var(--color-text);
        padding: 0.5rem;
    }

    input[type="search"]::-webkit-search-cancel-button {
        -webkit-appearance: none;
        height: 1em;
        width: 1em;
        border-radius: 50%;
        background: url(https://pro.fontawesome.com/releases/v5.10.0/svgs/solid/times-circle.svg) no-repeat 50% 50%;
        background-size: contain;
        background-color: white;
    }

    #openFilterPanelBtn {
        margin-left: 20px;
        background-color: var(--color-tertiary);
        border-radius: 0.7rem;
        border-color: #555555;
        border-style: solid;
        color: var(--color-text);
        padding: 0.5rem;
    }

    #openFilterPanelBtn:hover {
        cursor: pointer;
        background-color: #111111;
    }

    .filterPanel {
        /* TODO: Uncomment this line, for testing only */
        /* display: none; */
    }

    .filterPanel h2 {
        display:inline;
        margin: 0;
    }

    .filterPanelHeader {
        display: flex;
        justify-content:space-between;
        align-items: center;;
        height: auto;
        margin-bottom: 20px;
    }

    #closeFilterPanelBtn {
        background: transparent;
        border: transparent;
        border-radius: 50%;
        width: 2em;
        height: 2em;
    }

    i.fa-xmark {
        color: white;
    }

    #closeFilterPanelBtn:hover {
        background-color: #555555;
    }

    .tag-container h3 {
        padding: 5px 15px;
        margin: 0;
        border-radius: 50rem;
    }

    .tag-container-filter-panel ul {
        margin: 10px 0px;
    }

    .tagSummary ul {
        display: flex;
        flex-wrap: wrap;
    }
</style>

<script>
    let includeTags: string[] = [];
    let excludeTags: string[] = [];
    
    const searchInput = document.getElementById("searchInput") as HTMLInputElement;
    const filterTagPanel = document.getElementById("filterTagPanel") as HTMLDivElement;

    function UpdateSearchResults() {
        // ========== Updating Project card visibility ==========
        const searchInput = document.getElementById("searchInput") as HTMLInputElement;
        let searchText = searchInput.value.toUpperCase();
        // Update the search results
        const searchResultContainer = document.getElementById("searchResult");
        if (searchResultContainer === null) {
            console.error("Can't find searchResult");
            return;
        }
        const searchResults = searchResultContainer.getElementsByClassName("projectCard");

        // Loop through all list items, and hide those who don't match the search query
        for (let i = 0; i < searchResults.length; ++i) {
            const project = searchResults[i] as HTMLDivElement;
            let ifShow = true;
            // If doesn't include the search text
            if (!project.id.toUpperCase().includes(searchText))
                ifShow = false;
            // Check the tags
            else {
                const projectTagsRaw= project.getAttribute("data-tags") as string;
                const projectTags = projectTagsRaw.replaceAll(" ", "").split(',');

                if (includeTags.length > 0 && !includeTags.every(tag => projectTags.includes(tag)))
                    ifShow = false;
                if (excludeTags.length > 0 && excludeTags.some(tag => projectTags.includes(tag)))
                    ifShow = false;
            }

            // // For debugging:
            // console.log("================================")
            // console.log("projectTags: " + projectTags);
            // console.log("IncludeTags: " + includeTags);
            // console.log("ExcludeTags: " + excludeTags);
            
            project.style.display = ifShow ? '' : 'none';
        }


        // ========== Tag Summary ========== 
        function UpdateTagSummaryVisibility(tagID: string, tagArray: string[]) {
            const tagSummary = document.getElementById(tagID) as HTMLUListElement;
            const ifNoElementsInArray = tagArray.length === 0;
            tagSummary.style.display = ifNoElementsInArray ? 'none' : '';
            
            if (ifNoElementsInArray) {
                return;
            }

            const tagSummaryList = tagSummary.getElementsByTagName("ul")[0];
            for (let i = 0; i < tagSummaryList.childElementCount; ++i) {
                const listItem = tagSummaryList.children.item(i) as HTMLLIElement;
                // Remove any characters after "-"
                const tagName = listItem.id.split("-")[0];
                listItem.style.display = tagArray.includes(tagName) ? '' : 'none';
            }
        }
        
        UpdateTagSummaryVisibility("includeTagSummary", includeTags);
        UpdateTagSummaryVisibility("excludeTagSummary", excludeTags);

        // ========== Update the url ==========
        const newUrlSearchParams = new URLSearchParams();
        if (searchInput.value !== "") 
            newUrlSearchParams.append("searchText", searchInput.value);
        
        if (includeTags.length > 0)
            newUrlSearchParams.append("includeTags", JSON.stringify(includeTags));

        if (excludeTags.length > 0)
            newUrlSearchParams.append("excludeTags", JSON.stringify(excludeTags));

        let newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + '?' + newUrlSearchParams.toString();
        window.history.pushState({path: newurl}, '', newurl);
    }

    function UpdateSearchResultsFromUrlParams() {
        const urlSearchParams = new URLSearchParams(window.location.search);
        const params = Object.fromEntries(urlSearchParams.entries());
        
        const urlSearchInput = params["searchText"];
        if (urlSearchInput !== undefined)
            searchInput.value = urlSearchInput;

        const urlIncludeTags = params["includeTags"];
        if (urlIncludeTags !== undefined)
        {
            includeTags = JSON.parse(urlIncludeTags);
            includeTags.forEach(tag => {
                const tagElement = document.getElementById(tag + "-filter-btn");
                if (tagElement != null) {
                    tagElement.classList.add("includeTag");
                } else {
                    console.error("Cannot find: " + tagElement);
                }
            });
        }

        UpdateSearchResults();
    }

    // If displayValue == "", Toggle between "block" and "none"
    // Else style.display = displayValue
    function ToggleDivVisibility(id: string, displayValue ="")
    {
        const divElement = document.getElementsByClassName(id)[0] as HTMLDivElement;
        if (displayValue === "") {
            const currDisplay = divElement.style.display;
            divElement.style.display = currDisplay === "none" ? "block" : "none";
        }
        else {
            divElement.style.display = displayValue;
        }
    }

    // ========== Tags ==========

    function OnTagClicked(tag: HTMLLIElement) {
        const includeTag = "includeTag";
        const excludeTag = "excludeTag";

        const tagValue = tag.id.replace("-filter-btn", "");

        // Change from includeTag to excludeTag
        if (tag.classList.contains(includeTag)) {
            tag.classList.remove(includeTag);
            tag.classList.add(excludeTag);
            
            includeTags.splice(includeTags.indexOf(tagValue), 1);
            excludeTags.push(tagValue);
        }
        // Change from excludeTag to unselect the whole tag
        else if (tag.classList.contains(excludeTag)) {
            tag.classList.remove(excludeTag);

            excludeTags.splice(excludeTags.indexOf(tagValue), 1);
        }
        // Change from not selecting the tag to includeTag
        else {
            tag.classList.add(includeTag);

            includeTags.push(tagValue);
        }

        UpdateSearchResults();
    }
    
    // ========== Initialise this page ==========

    // ========== Registering event listeners ==========
    searchInput.addEventListener("input", UpdateSearchResults);
    
    const filterPanelBtn = document.getElementById("openFilterPanelBtn") as HTMLButtonElement;
    filterPanelBtn.addEventListener("click", ()=> ToggleDivVisibility("filterPanel"));

    const filterPanelCloseBtn = document.getElementById("closeFilterPanelBtn") as HTMLButtonElement;
    filterPanelCloseBtn.addEventListener("click", ()=> ToggleDivVisibility("filterPanel", "none"));

    const tags = filterTagPanel.getElementsByClassName("tag");
    for (let i = 0; i < tags.length; i++) {
        tags[i].addEventListener("click", () => OnTagClicked(tags[i] as HTMLLIElement));
    }

    UpdateSearchResultsFromUrlParams();
    
</script>