---
import ProjectCard from "../components/ProjectCard.astro";
import Layout from "../layouts/Layout.astro";

const cards = await Astro.glob('../projects/*.md');

let searchText = "";

class ProjectFilter {
    textFilter: string;
    includeTags: string;
    excludedTags: string;
    constructor(textFilter: string, includeTags: string, excludedTags: string){
        this.textFilter = textFilter;
        this.includeTags = includeTags;
        this.excludedTags = excludedTags;
    }
}

---

<Layout title = "Search">
	<h1>Search</h1>
    <section>
        <div class="container searchBar">
            <div class="card">
                <input id="searchInput" type="search" placeholder="Search" value={searchText}/>
                <button class="filterBtn">Filter</button>
            </div> 
        </div> 
        <div class="container filterPanel">
            <div class="card">
                
            </div>
        </div>
        <div class="container searchResult">
                {cards.map(card => (
                    card.frontmatter.ifShow &&
                    <ProjectCard 
                        title={card.frontmatter.title} 
                        description={card.frontmatter.shortDescription} 
                        thumbnailPath={card.frontmatter.thumbnailPath}
                        slug={card.frontmatter.slug}
                        tags={card.frontmatter.tags}
                    />
                ))}
        </div>
    </section>
</Layout>   

<style>
    .searchBar .card {
        display: flex;
    }

    .searchBar input {
        width: 100% ;
        background-color: var(--color-tertiary);
        border-radius: 0.7rem;
        border-color: #555555;
        border-style: solid;
        color: var(--color-text);
        padding: 0.5rem;
    }

    input[type="search"]::-webkit-search-cancel-button {
      -webkit-appearance: none;
      height: 1em;
      width: 1em;
      border-radius: 50%;
      background: url(https://pro.fontawesome.com/releases/v5.10.0/svgs/solid/times-circle.svg) no-repeat 50% 50%;
      background-size: contain;
      background-color: white;
    }

    .filterBtn {
        margin-left: 20px;
        background-color: var(--color-tertiary);
        border-radius: 0.7rem;
        border-color: #555555;
        border-style: solid;
        color: var(--color-text);
        padding: 0.5rem;
    }

    .filterBtn:hover {
        cursor: pointer;
        background-color: #111111;
    }

    .filterPanel {
        display: none;
    }
</style>

<script>

    const searchInput = document.getElementById("searchInput") as HTMLInputElement;
    let searchText = '';

    function UpdateSearchResults() {
        console.log("Update")
        const searchInput = document.getElementById("searchInput") as HTMLInputElement;
        searchText = searchInput.value.toUpperCase();
        // Update the search results here
        var searchResultContainer = document.getElementsByClassName("searchResult");
        var searchResults = searchResultContainer[0].getElementsByTagName("div");
        // Loop through all list items, and hide those who don't match the search query
        for (let i = 0; i < searchResults.length; i++) {
            let project = searchResults[i];
            project.style.display = project.id.toUpperCase().includes(searchText) ? '' : 'none';
        }
        const newUrlSearchParams = new URLSearchParams();
        newUrlSearchParams.append("searchText", searchInput.value);
        let newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + '?' + newUrlSearchParams.toString();
        window.history.pushState({path: newurl}, '', newurl);
    }

    searchInput.addEventListener("keyup", UpdateSearchResults);

    const urlSearchParams = new URLSearchParams(window.location.search);
    const params = Object.fromEntries(urlSearchParams.entries());

    const urlSearchInput = params["searchText"];
    if (urlSearchInput !== undefined)
        searchInput.value = urlSearchInput;
  </script>